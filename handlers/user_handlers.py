from copy import deepcopy

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.context import FSMContext


from lexicon.lexicon import LEXICON_RU, LEXICON_LENG, LEXICON_MAIN
from filters.is_admin import IsAdmin
from states.states import *

from config_data.config import Config, load_config
from keyboards.reply_keyboards import start_mr, otvet_mr
from services.services import *
from database.users import *


router = Router()
config: Config = load_config()



@router.message(CommandStart(), StateFilter(default_state)) # IsAdmin(config.tg_bot.admin_ids),
async def start_message(message: Message):
    await handle_new_user(message)
    await message.answer(text = LEXICON_RU['/start'], reply_markup=start_mr)
    if message.from_user.id not in users_db:
        users_db[message.from_user.id] = deepcopy(users_template)


@router.message(Command('help'), StateFilter(default_state))
async def help_massage(message: Message):
    await message.answer(text = LEXICON_RU['/help'])


bot_otv = random_word()
@router.message(F.text.in_(['–ñ–º—è–∫–Ω–∏ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å!üòç']), StateFilter(default_state))
async def knopka_emae(message: Message, state: FSMContext):
    global bot_otv
    await message.answer(f'–í–æ—Ç —Ç–≤–æ–µ —Å–ª–æ–≤–æ, –ø–µ—Ä–µ–≤–µ–¥–∏ –µ–≥–æüóø\n\n                   <b>{bot_otv}</b>')
    await state.set_state(FSMgame.vvod_word)
    # if message.from_user.id not in users_db:
    #     users_db[message.from_user.id] = deepcopy(users_template)

#TODO: —ç—Ç–æ —á—Ç–æ–±—ã –ª—é–¥–∏ –Ω–µ –ø—ã—Ç–∞–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
@router.message(F.text.in_(['/start', '/help']), StateFilter(FSMgame.yes_no_game))
async def otv_game_com(message: Message):
    await message.answer(text= '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–æ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã...\n–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞–∂–º–∏ –Ω–∞ <b><i><u>–Ø –Ω–µ —Ö–æ—á—É –∏–≥—Ä–∞—Ç—åü•≤</u></i></b>')

@router.message(F.text.in_(['/start', '/help']), StateFilter(FSMgame.vvod_word))
async def otv_game_com(message: Message):
    global bot_otv
    await message.answer(text= '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–æ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã...\n–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –∞ –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É\n<b><i><u>–Ø –Ω–µ —Ö–æ—á—É –∏–≥—Ä–∞—Ç—åü•≤</u></i></b> –æ—Ç–∫—Ä—ã–≤ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ü§Ø')
    await message.answer(f'–ù–∞–ø–æ–º–∏–Ω–∞—é —Å–ª–æ–≤–æ:\n\n         <b>{bot_otv}</b>')

@router.message(F.text == '–ñ–º—è–∫–Ω–∏ –µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—åü•≤', StateFilter(default_state))
async def no_otv(message: Message):
    await message.answer(text = '–ï—Å–ª–∏ –∑–∞—Ö–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å —Ç–æ –∂–º—è–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É\n<b><i>–ñ–º—è–∫–Ω–∏ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å!üòç</i></b>', reply_markup=start_mr)

def obnov(bot_otv):
    bot_otv = random_word()
    return bot_otv

@router.message(F.text, StateFilter(FSMgame.vvod_word))
async def hhhh(message: Message, state:FSMContext):
    global bot_otv
    user_otv = message.text
    user_otv = user_otv.lower()
    winner = check_answer(user_otv, bot_otv)
    if winner == '–ú–æ–ª–æ–¥–µ—Ü\n\n–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æüòç':
        user_score = users_db[message.from_user.id]['score']
        user_score += 1
        users_db[message.from_user.id]['score'] = user_score
        user_life = users_db[message.from_user.id]['life']
        await message.answer(f'{winner}\n\n–¢–≤–æ–π —Å—á–µ—Ç {user_score}\n–¢–≤–æ–∏ –∂–∏–∑–Ω–∏ {user_life}‚ù§Ô∏è', reply_markup=otvet_mr) #\n\n–¢–≤–æ–π —Å—á–µ—Ç {user_score}
        bot_otv = obnov(bot_otv)
        await state.set_state(FSMgame.yes_no_game)
    else:      
        user_life = users_db[message.from_user.id]['life']
        user_life -= 1
        users_db[message.from_user.id]['life'] = user_life
        if users_db[message.from_user.id]['life'] != 0:
            user_score = users_db[message.from_user.id]['score']
            await message.answer(f'{winner}\n\n–¢–≤–æ–π —Å—á–µ—Ç {user_score}\n–¢–≤–æ–∏ –∂–∏–∑–Ω–∏ {user_life}‚ù§Ô∏è', reply_markup=otvet_mr) #\n\n–¢–≤–æ–π —Å—á–µ—Ç {user_score}
            bot_otv = obnov(bot_otv)
            await state.set_state(FSMgame.yes_no_game)
        else:
            user_score = users_db[message.from_user.id]['score']
            await message.answer(f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ªüò¢\n\n–¢–≤–æ–π —Å—á–µ—Ç {user_score}') #\n\n–¢–≤–æ–π —Å—á–µ—Ç {user_score}
            users_db[message.from_user.id]['score'] = 0
            users_db[message.from_user.id]['life'] = 3
            await state.clear()
            await message.answer(text = '–ï—Å–ª–∏ –∑–∞—Ö–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å —Ç–æ –∂–º—è–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É\n<b><i>–ñ–º—è–∫–Ω–∏ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å!üòç</i></b>\n\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: <i><u>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</u></i>', reply_markup=start_mr)
            
        #     # Save data to database
        # conn = sqlite3.connect('users.db')
        # cursor = conn.cursor()
        # cursor.execute("INSERT INTO users (user_id, score, life) VALUES (?, ?, ?)", 
        #                (message.from_user.id, user_score, user_life))
        # conn.commit()
        # conn.close()


@router.message(F.text == '–Ø —Ö–æ—á—É –∏–≥—Ä–∞—Ç—å –¥–æ –ø–æ–±–µ–¥–Ω–æ–≥–æüòà', StateFilter(FSMgame.yes_no_game))
async def game(message: Message, state: FSMContext):
    global bot_otv
    await message.answer(f'–í–æ—Ç —Ç–≤–æ–µ —Å–ª–æ–≤–æ, –ø–µ—Ä–µ–≤–µ–¥–∏ –µ–≥–æüóø\n\n                   <b>{bot_otv}</b>')
    await state.set_state(FSMgame.vvod_word)


@router.message(F.text.in_(['–Ø –Ω–µ —Ö–æ—á—É –∏–≥—Ä–∞—Ç—åü•≤']), StateFilter(FSMgame.yes_no_game))
async def no_game(message: Message, state: FSMContext):
    await message.answer(text = '–ï—Å–ª–∏ –∑–∞—Ö–æ–∂–µ—à—å –∏–≥—Ä–∞—Ç—å —Ç–æ –∂–º—è–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É\n<b><i>–ñ–º—è–∫–Ω–∏ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å!üòç</i></b>\n\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: <i><u>–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</u></i>', reply_markup=start_mr)
    await state.clear()
    users_db[message.from_user.id]['score'] = 0
    users_db[message.from_user.id]['life'] = 3